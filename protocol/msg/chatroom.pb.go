// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chatroom.proto

package msg

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CHATROOM int32

const (
	CHATROOM_UNKNOWN CHATROOM = 0
	// 用户心跳
	CHATROOM_PING CHATROOM = 1
	CHATROOM_PONG CHATROOM = 2
	// 登入请求/回复
	CHATROOM_LOGIN_REQ  CHATROOM = 100
	CHATROOM_LOGIN_RESP CHATROOM = 101
	// 聊天请求/回复
	CHATROOM_CHAT_REQ  CHATROOM = 201
	CHATROOM_CHAT_RESP CHATROOM = 202
	// 广播聊天消息
	CHATROOM_BROADCAST_MSG CHATROOM = 203
)

var CHATROOM_name = map[int32]string{
	0:   "UNKNOWN",
	1:   "PING",
	2:   "PONG",
	100: "LOGIN_REQ",
	101: "LOGIN_RESP",
	201: "CHAT_REQ",
	202: "CHAT_RESP",
	203: "BROADCAST_MSG",
}

var CHATROOM_value = map[string]int32{
	"UNKNOWN":       0,
	"PING":          1,
	"PONG":          2,
	"LOGIN_REQ":     100,
	"LOGIN_RESP":    101,
	"CHAT_REQ":      201,
	"CHAT_RESP":     202,
	"BROADCAST_MSG": 203,
}

func (x CHATROOM) String() string {
	return proto.EnumName(CHATROOM_name, int32(x))
}

func (CHATROOM) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9ca54b9e3ca377ae, []int{0}
}

// 心跳
type Ping struct {
	ClientTime int64 `protobuf:"varint,1,opt,name=clientTime,proto3" json:"clientTime,omitempty"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ca54b9e3ca377ae, []int{0}
}
func (m *Ping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return m.Size()
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

func (m *Ping) GetClientTime() int64 {
	if m != nil {
		return m.ClientTime
	}
	return 0
}

// 心跳
type Pong struct {
	ClientTime int64 `protobuf:"varint,1,opt,name=clientTime,proto3" json:"clientTime,omitempty"`
	ServerTime int64 `protobuf:"varint,2,opt,name=serverTime,proto3" json:"serverTime,omitempty"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ca54b9e3ca377ae, []int{1}
}
func (m *Pong) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return m.Size()
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetClientTime() int64 {
	if m != nil {
		return m.ClientTime
	}
	return 0
}

func (m *Pong) GetServerTime() int64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

// 请求登入
type LoginReq struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Room string `protobuf:"bytes,2,opt,name=room,proto3" json:"room,omitempty"`
}

func (m *LoginReq) Reset()         { *m = LoginReq{} }
func (m *LoginReq) String() string { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()    {}
func (*LoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ca54b9e3ca377ae, []int{2}
}
func (m *LoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginReq.Merge(m, src)
}
func (m *LoginReq) XXX_Size() int {
	return m.Size()
}
func (m *LoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginReq proto.InternalMessageInfo

func (m *LoginReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LoginReq) GetRoom() string {
	if m != nil {
		return m.Room
	}
	return ""
}

type LoginResp struct {
	ErrCode ERROR      `protobuf:"varint,1,opt,name=errCode,proto3,enum=msg.ERROR" json:"errCode,omitempty"`
	Room    string     `protobuf:"bytes,2,opt,name=room,proto3" json:"room,omitempty"`
	History []*ChatMsg `protobuf:"bytes,3,rep,name=history,proto3" json:"history,omitempty"`
}

func (m *LoginResp) Reset()         { *m = LoginResp{} }
func (m *LoginResp) String() string { return proto.CompactTextString(m) }
func (*LoginResp) ProtoMessage()    {}
func (*LoginResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ca54b9e3ca377ae, []int{3}
}
func (m *LoginResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResp.Merge(m, src)
}
func (m *LoginResp) XXX_Size() int {
	return m.Size()
}
func (m *LoginResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResp.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResp proto.InternalMessageInfo

func (m *LoginResp) GetErrCode() ERROR {
	if m != nil {
		return m.ErrCode
	}
	return ERROR_SUCCESS
}

func (m *LoginResp) GetRoom() string {
	if m != nil {
		return m.Room
	}
	return ""
}

func (m *LoginResp) GetHistory() []*ChatMsg {
	if m != nil {
		return m.History
	}
	return nil
}

// 请求发起聊天
type ChatReq struct {
	ChatText string `protobuf:"bytes,1,opt,name=chatText,proto3" json:"chatText,omitempty"`
}

func (m *ChatReq) Reset()         { *m = ChatReq{} }
func (m *ChatReq) String() string { return proto.CompactTextString(m) }
func (*ChatReq) ProtoMessage()    {}
func (*ChatReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ca54b9e3ca377ae, []int{4}
}
func (m *ChatReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatReq.Merge(m, src)
}
func (m *ChatReq) XXX_Size() int {
	return m.Size()
}
func (m *ChatReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChatReq proto.InternalMessageInfo

func (m *ChatReq) GetChatText() string {
	if m != nil {
		return m.ChatText
	}
	return ""
}

type ChatResp struct {
	Err ERROR `protobuf:"varint,1,opt,name=err,proto3,enum=msg.ERROR" json:"err,omitempty"`
}

func (m *ChatResp) Reset()         { *m = ChatResp{} }
func (m *ChatResp) String() string { return proto.CompactTextString(m) }
func (*ChatResp) ProtoMessage()    {}
func (*ChatResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ca54b9e3ca377ae, []int{5}
}
func (m *ChatResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatResp.Merge(m, src)
}
func (m *ChatResp) XXX_Size() int {
	return m.Size()
}
func (m *ChatResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatResp.DiscardUnknown(m)
}

var xxx_messageInfo_ChatResp proto.InternalMessageInfo

func (m *ChatResp) GetErr() ERROR {
	if m != nil {
		return m.Err
	}
	return ERROR_SUCCESS
}

// 房间内广播的聊天消息
type BroadcastMsg struct {
	Msgs []*ChatMsg `protobuf:"bytes,1,rep,name=msgs,proto3" json:"msgs,omitempty"`
}

func (m *BroadcastMsg) Reset()         { *m = BroadcastMsg{} }
func (m *BroadcastMsg) String() string { return proto.CompactTextString(m) }
func (*BroadcastMsg) ProtoMessage()    {}
func (*BroadcastMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ca54b9e3ca377ae, []int{6}
}
func (m *BroadcastMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastMsg.Merge(m, src)
}
func (m *BroadcastMsg) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastMsg.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastMsg proto.InternalMessageInfo

func (m *BroadcastMsg) GetMsgs() []*ChatMsg {
	if m != nil {
		return m.Msgs
	}
	return nil
}

// 一条聊天信息
type ChatMsg struct {
	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ChatText string `protobuf:"bytes,2,opt,name=chatText,proto3" json:"chatText,omitempty"`
	CreateAt int64  `protobuf:"varint,3,opt,name=createAt,proto3" json:"createAt,omitempty"`
}

func (m *ChatMsg) Reset()         { *m = ChatMsg{} }
func (m *ChatMsg) String() string { return proto.CompactTextString(m) }
func (*ChatMsg) ProtoMessage()    {}
func (*ChatMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ca54b9e3ca377ae, []int{7}
}
func (m *ChatMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMsg.Merge(m, src)
}
func (m *ChatMsg) XXX_Size() int {
	return m.Size()
}
func (m *ChatMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMsg proto.InternalMessageInfo

func (m *ChatMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChatMsg) GetChatText() string {
	if m != nil {
		return m.ChatText
	}
	return ""
}

func (m *ChatMsg) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func init() {
	proto.RegisterEnum("msg.CHATROOM", CHATROOM_name, CHATROOM_value)
	proto.RegisterType((*Ping)(nil), "msg.Ping")
	proto.RegisterType((*Pong)(nil), "msg.Pong")
	proto.RegisterType((*LoginReq)(nil), "msg.LoginReq")
	proto.RegisterType((*LoginResp)(nil), "msg.LoginResp")
	proto.RegisterType((*ChatReq)(nil), "msg.ChatReq")
	proto.RegisterType((*ChatResp)(nil), "msg.ChatResp")
	proto.RegisterType((*BroadcastMsg)(nil), "msg.BroadcastMsg")
	proto.RegisterType((*ChatMsg)(nil), "msg.ChatMsg")
}

func init() { proto.RegisterFile("chatroom.proto", fileDescriptor_9ca54b9e3ca377ae) }

var fileDescriptor_9ca54b9e3ca377ae = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcf, 0x8a, 0x13, 0x41,
	0x10, 0xc6, 0xd3, 0x99, 0xc1, 0xcc, 0x54, 0x36, 0x61, 0xa8, 0x53, 0x58, 0xa4, 0x09, 0x8d, 0x2e,
	0xc1, 0x43, 0x94, 0xf8, 0x04, 0x49, 0x5c, 0xe3, 0xe2, 0x66, 0x66, 0xec, 0x64, 0x11, 0xbc, 0x2c,
	0x63, 0xd2, 0x4c, 0x06, 0x9c, 0x74, 0xec, 0x6e, 0x44, 0x0f, 0xbe, 0x83, 0x8f, 0xe5, 0x9f, 0xcb,
	0x1e, 0x3d, 0x4a, 0xf2, 0x22, 0xd2, 0x3d, 0xc9, 0xba, 0x42, 0x60, 0x6f, 0x55, 0xdf, 0x57, 0x5f,
	0xf5, 0x8f, 0xa2, 0xa1, 0xbd, 0x58, 0x65, 0x46, 0x49, 0x59, 0xf6, 0x37, 0x4a, 0x1a, 0x89, 0x5e,
	0xa9, 0xf3, 0xd3, 0xa6, 0x50, 0x4a, 0xaa, 0x4a, 0x61, 0x67, 0xe0, 0xa7, 0xc5, 0x3a, 0x47, 0x0a,
	0xb0, 0xf8, 0x50, 0x88, 0xb5, 0x99, 0x17, 0xa5, 0xe8, 0x90, 0x2e, 0xe9, 0x79, 0xfc, 0x8e, 0xc2,
	0x5e, 0x82, 0x9f, 0xca, 0xfb, 0xe7, 0xac, 0xaf, 0x85, 0xfa, 0x24, 0x94, 0xf3, 0xeb, 0x95, 0xff,
	0x4f, 0x61, 0x03, 0x08, 0x2e, 0x65, 0x5e, 0xac, 0xb9, 0xf8, 0x88, 0x08, 0xfe, 0x3a, 0xdb, 0x6f,
	0x09, 0xb9, 0xab, 0xad, 0x66, 0x79, 0x5d, 0x32, 0xe4, 0xae, 0x66, 0x25, 0x84, 0xfb, 0x8c, 0xde,
	0xe0, 0x23, 0x68, 0x08, 0xa5, 0xc6, 0x72, 0x59, 0xe5, 0xda, 0x03, 0xe8, 0x97, 0x3a, 0xef, 0x9f,
	0x73, 0x9e, 0x70, 0x7e, 0xb0, 0x8e, 0xad, 0xc1, 0x33, 0x68, 0xac, 0x0a, 0x6d, 0xa4, 0xfa, 0xd2,
	0xf1, 0xba, 0x5e, 0xaf, 0x39, 0x38, 0x71, 0xc9, 0xf1, 0x2a, 0x33, 0x53, 0x9d, 0xf3, 0x83, 0xc9,
	0x1e, 0x43, 0xc3, 0x6a, 0x96, 0xf0, 0x14, 0x02, 0x7b, 0xc1, 0xb9, 0xf8, 0x6c, 0xf6, 0x94, 0xb7,
	0x3d, 0xeb, 0x41, 0x50, 0x8d, 0xe9, 0x0d, 0x3e, 0x04, 0x4f, 0x28, 0x75, 0x04, 0xc8, 0xca, 0xec,
	0x19, 0x9c, 0x8c, 0x94, 0xcc, 0x96, 0x8b, 0x4c, 0xdb, 0x97, 0xb0, 0x0b, 0x7e, 0xa9, 0x73, 0xdd,
	0x21, 0x47, 0x28, 0x9c, 0xc3, 0xae, 0x2a, 0x04, 0x3b, 0x7c, 0xec, 0x48, 0x77, 0xb1, 0xea, 0xff,
	0x63, 0x39, 0x4f, 0x89, 0xcc, 0x88, 0xa1, 0xe9, 0x78, 0xee, 0xfc, 0xb7, 0xfd, 0x93, 0xaf, 0x10,
	0x8c, 0x5f, 0x0d, 0xe7, 0x3c, 0x49, 0xa6, 0xd8, 0x84, 0xc6, 0x55, 0xfc, 0x3a, 0x4e, 0xde, 0xc6,
	0x51, 0x0d, 0x03, 0xf0, 0xd3, 0x8b, 0x78, 0x12, 0x11, 0x57, 0x25, 0xf1, 0x24, 0xaa, 0x63, 0x0b,
	0xc2, 0xcb, 0x64, 0x72, 0x11, 0x5f, 0xf3, 0xf3, 0x37, 0xd1, 0x12, 0xdb, 0x00, 0x87, 0x76, 0x96,
	0x46, 0x02, 0x5b, 0xd5, 0x2e, 0xe7, 0xfe, 0x20, 0xd8, 0x86, 0x70, 0xdf, 0xce, 0xd2, 0xe8, 0x27,
	0x41, 0x84, 0xd6, 0x88, 0x27, 0xc3, 0x17, 0xe3, 0xe1, 0x6c, 0x7e, 0x3d, 0x9d, 0x4d, 0xa2, 0x5f,
	0x64, 0x44, 0xbf, 0x6f, 0x29, 0xb9, 0xd9, 0x52, 0xf2, 0x67, 0x4b, 0xc9, 0xb7, 0x1d, 0xad, 0xdd,
	0xec, 0x68, 0xed, 0xf7, 0x8e, 0xd6, 0xde, 0xf9, 0x4f, 0x4b, 0x9d, 0xbf, 0x7f, 0xe0, 0xbe, 0xe4,
	0xf3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x43, 0x6e, 0x3b, 0xb6, 0x02, 0x00, 0x00,
}

func (m *Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientTime != 0 {
		i = encodeVarintChatroom(dAtA, i, uint64(m.ClientTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Pong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pong) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pong) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerTime != 0 {
		i = encodeVarintChatroom(dAtA, i, uint64(m.ServerTime))
		i--
		dAtA[i] = 0x10
	}
	if m.ClientTime != 0 {
		i = encodeVarintChatroom(dAtA, i, uint64(m.ClientTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Room) > 0 {
		i -= len(m.Room)
		copy(dAtA[i:], m.Room)
		i = encodeVarintChatroom(dAtA, i, uint64(len(m.Room)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintChatroom(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.History) > 0 {
		for iNdEx := len(m.History) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.History[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatroom(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Room) > 0 {
		i -= len(m.Room)
		copy(dAtA[i:], m.Room)
		i = encodeVarintChatroom(dAtA, i, uint64(len(m.Room)))
		i--
		dAtA[i] = 0x12
	}
	if m.ErrCode != 0 {
		i = encodeVarintChatroom(dAtA, i, uint64(m.ErrCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChatText) > 0 {
		i -= len(m.ChatText)
		copy(dAtA[i:], m.ChatText)
		i = encodeVarintChatroom(dAtA, i, uint64(len(m.ChatText)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		i = encodeVarintChatroom(dAtA, i, uint64(m.Err))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BroadcastMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msgs) > 0 {
		for iNdEx := len(m.Msgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatroom(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChatMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateAt != 0 {
		i = encodeVarintChatroom(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChatText) > 0 {
		i -= len(m.ChatText)
		copy(dAtA[i:], m.ChatText)
		i = encodeVarintChatroom(dAtA, i, uint64(len(m.ChatText)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintChatroom(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChatroom(dAtA []byte, offset int, v uint64) int {
	offset -= sovChatroom(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientTime != 0 {
		n += 1 + sovChatroom(uint64(m.ClientTime))
	}
	return n
}

func (m *Pong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientTime != 0 {
		n += 1 + sovChatroom(uint64(m.ClientTime))
	}
	if m.ServerTime != 0 {
		n += 1 + sovChatroom(uint64(m.ServerTime))
	}
	return n
}

func (m *LoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChatroom(uint64(l))
	}
	l = len(m.Room)
	if l > 0 {
		n += 1 + l + sovChatroom(uint64(l))
	}
	return n
}

func (m *LoginResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovChatroom(uint64(m.ErrCode))
	}
	l = len(m.Room)
	if l > 0 {
		n += 1 + l + sovChatroom(uint64(l))
	}
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovChatroom(uint64(l))
		}
	}
	return n
}

func (m *ChatReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChatText)
	if l > 0 {
		n += 1 + l + sovChatroom(uint64(l))
	}
	return n
}

func (m *ChatResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != 0 {
		n += 1 + sovChatroom(uint64(m.Err))
	}
	return n
}

func (m *BroadcastMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovChatroom(uint64(l))
		}
	}
	return n
}

func (m *ChatMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChatroom(uint64(l))
	}
	l = len(m.ChatText)
	if l > 0 {
		n += 1 + l + sovChatroom(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovChatroom(uint64(m.CreateAt))
	}
	return n
}

func sovChatroom(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChatroom(x uint64) (n int) {
	return sovChatroom(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatroom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientTime", wireType)
			}
			m.ClientTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatroom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatroom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatroom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatroom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientTime", wireType)
			}
			m.ClientTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatroom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			m.ServerTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatroom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatroom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatroom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatroom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatroom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatroom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatroom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatroom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatroom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatroom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Room = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatroom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatroom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatroom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatroom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= ERROR(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatroom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatroom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatroom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Room = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatroom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatroom
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatroom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, &ChatMsg{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatroom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatroom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatroom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatroom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatroom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatroom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatroom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatroom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatroom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatroom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= ERROR(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatroom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatroom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatroom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatroom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatroom
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatroom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &ChatMsg{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatroom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatroom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatroom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatroom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatroom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatroom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatroom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatroom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatroom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatroom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatroom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatroom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatroom(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatroom
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatroom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatroom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChatroom
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChatroom
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChatroom
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChatroom        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatroom          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChatroom = fmt.Errorf("proto: unexpected end of group")
)
